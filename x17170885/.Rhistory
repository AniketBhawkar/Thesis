results <- data.frame(coin, perish)
names(results) <- c("Coin Toss Accuracy", "Everyone Perishes Accuracy")
summary(results)
ggplot(melt(results), mapping = aes (fill = variable, x = value)) + geom_density (alpha = .5)
boxplot(results)
df <- win[, c("Win", "TossWin")]
df$Win <- factor(df$Win, levels = c(0,1), labels = c("No", "Yes"))
index <- sample(1:dim(df)[1], dim(df)[1] * .75, replace=FALSE)
training <- df[index, ]
testing <- df[-index, ]
table(training$Win, training$TossWin)
predictWin <- function(data) {
model <- rep("No", dim(data)[1])
model[data$TossWin == 1] <- "Yes"
return(model)
}
win <- c()
for (i in 1:1000) {
index <- sample(1:dim(df)[1], dim(df)[1] * .75, replace=FALSE)
testing <- df[-index, ]
winModel <- predictWin(testing)
win[i] <- 1 - mean(winModel != testing$Win)
}
results$`Winning Accuracy` <- win
names(results) <- c("Coin", "All Perish", "toss winning")
boxplot(results)
CrossTable(testing$Win, winModel)
CrossTable(testing$Win, winModel, prop.chisq = F, prop.c = F, prop.r = F)
confusionMatrix(table(testing$Win,winModel))
winModel1 = as.factor(winModel)
auc(testing$Win, winModel1)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
# Data
win = read.csv("F:/Masters/Semester 2/Advanced Data Mining/IPL/raghu543-ipl-data-till-2017/clean datasets/Match_Impact_Teams.csv")
str(win)
xtabs(~Win+Team_Id, data=win)
# Convert into Factor
win$Win<- as.factor(win$Win)
win$match_id <- as.factor(win$match_id)
win$Team_Id <- as.factor(win$Team_Id)
win$match_winner <- as.factor(win$match_winner)
# Visualization
pairs.panels(win[-8])
win %>%
ggplot(aes(x=Win, y=Avg_Impact_Fielding, fill = Win))+
geom_boxplot() +
ggtitle("Box Plot")
win %>%
ggplot(aes(x=Win, y=Avg_Impact_Batting, fill = Win))+
geom_boxplot() +
ggtitle("Box Plot")
win %>%
ggplot(aes(x=Win, y=Avg_Impact_Bowling, fill = Win))+
geom_boxplot() +
ggtitle("Box Plot")
win %>% ggplot(aes(x=Avg_Impact_Fielding, fill = Win))+
geom_density(alpha=0.8, color='black') +
ggtitle("Density Plot")
win %>% ggplot(aes(x=Avg_Impact_Batting, fill = Win))+
geom_density(alpha=0.8, color='black') +
ggtitle("Density Plot")
win %>% ggplot(aes(x=Avg_Impact_Bowling, fill = Win))+
geom_density(alpha=0.8, color='black') +
ggtitle("Density Plot")
# Data Partition
library(e1071)
set.seed(3696)
index <- sample(1:dim(win)[1],dim(win)[1]*.75,replace=FALSE)
training  <- win[index, ]
testing  <- win[-index, ]
############################# Naive Bayes' Model ##############################
model <- naive_bayes(Win ~ TossWin+Avg_Impact_Batting+Avg_Impact_Bowling+Avg_Impact_Fielding,data = training)
model
plot(model)
# Prediction
p <- predict(model, training, type = 'prob')
head(cbind(p,training))
# Confusion Matrix#
# Training Data
p1 <- predict(model,training)
(tab1 <- table(p1,training$Win))
# Misclassification
1-sum(diag(tab1)) / sum(tab1)
# Accuracy
sum(diag(tab1)) / sum(tab1)
# Testing Data
p2 <- predict(model,testing)
(tab2 <- table(p2,testing$Win))
## Misclassification
1-sum(diag(tab2)) / sum(tab2)
# Accuracy
sum(diag(tab2)) / sum(tab2)
win %>%
ggplot(aes(x=Win, y=Avg_Impact_Fielding, fill = Win))+
geom_boxplot() +
ggtitle("Box Plot")
win %>%
ggplot(aes(x=Win, y=Avg_Impact_Fielding.x, fill = Win))+
geom_boxplot() +
ggtitle("Box Plot")
win %>% ggplot(aes(x=Avg_Impact_Fielding.x, fill = Win))+
geom_density(alpha=0.8, color='black') +
ggtitle("Density Plot")
library(keras)
library(readr)
df = read.csv("F:/Masters/Semester 2/Advanced Data Mining/IPL/raghu543-ipl-data-till-2017/clean datasets/x10_over_2innings.csv")
df = df[c(-1,-2,-3,-4,-5,-6,-15,-16)]
data = as.matrix(df)
dimnames(data) = NULL
set.seed(1234)
index = sample(2,
nrow(data),
replace = TRUE,
prob = c(0.75,0.25))
x_train = data[index == 1,-10]
x_test = data[index == 2,-10]
#x_test_actual = data[index == 1,8]
y_test_actual = data[index == 2,10]
y_train = to_categorical(data[index==1,10])
y_test = to_categorical(data[index==2,10])
mean_train = apply(x_train,
2,
mean)
std_train = apply(x_train,
2,
sd)
x_train = scale(x_train,
center = mean_train,
scale = std_train)
x_test = scale(x_test,
center = mean_train,
scale = std_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(9)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "adam",
metrics = c("accuracy")
)
history <- model %>%
fit(x_train,
y_train,
epochs = 20,
batch_size = 128,
validation_split = 0.2)
plot(history)
model %>%
evaluate(x_test,
y_test)
pred = model %>%
predict_classes(x_test)
table(Predicted = pred,
Actual = y_test_actual)
prob = model %>%
predict_proba(x_test)
ans = cbind(prob,pred,y_test_actual)
library(keras)
library(readr)
df = read.csv("F:/Masters/Semester 2/Advanced Data Mining/IPL/raghu543-ipl-data-till-2017/clean datasets/x10_over_2innings.csv")
df = df[c(-1,-2,-3,-4,-5,-6,-15,-16)]
data = as.matrix(df)
dimnames(data) = NULL
set.seed(3696)
index = sample(2,
nrow(data),
replace = TRUE,
prob = c(0.75,0.25))
x_train = data[index == 1,-10]
x_test = data[index == 2,-10]
#x_test_actual = data[index == 1,8]
y_test_actual = data[index == 2,10]
y_train = to_categorical(data[index==1,10])
y_test = to_categorical(data[index==2,10])
mean_train = apply(x_train,
2,
mean)
std_train = apply(x_train,
2,
sd)
x_train = scale(x_train,
center = mean_train,
scale = std_train)
x_test = scale(x_test,
center = mean_train,
scale = std_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(9)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "adam",
metrics = c("accuracy")
)
history <- model %>%
fit(x_train,
y_train,
epochs = 20,
batch_size = 128,
validation_split = 0.2)
plot(history)
model %>%
evaluate(x_test,
y_test)
pred = model %>%
predict_classes(x_test)
table(Predicted = pred,
Actual = y_test_actual)
prob = model %>%
predict_proba(x_test)
ans = cbind(prob,pred,y_test_actual)
library(keras)
library(readr)
df = read.csv("F:/Masters/Semester 2/Advanced Data Mining/IPL/raghu543-ipl-data-till-2017/clean datasets/x15_over_2innings.csv")
df = df[c(-1,-2,-3,-4,-5,-6,-15,-16)]
data = as.matrix(df)
dimnames(data) = NULL
set.seed(3696)
index = sample(2,
nrow(data),
replace = TRUE,
prob = c(0.75,0.25))
x_train = data[index == 1,-10]
x_test = data[index == 2,-10]
#x_test_actual = data[index == 1,8]
y_test_actual = data[index == 2,10]
y_train = to_categorical(data[index==1,10])
y_test = to_categorical(data[index==2,10])
mean_train = apply(x_train,
2,
mean)
std_train = apply(x_train,
2,
sd)
x_train = scale(x_train,
center = mean_train,
scale = std_train)
x_test = scale(x_test,
center = mean_train,
scale = std_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(9)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "adam",
metrics = c("accuracy")
)
history <- model %>%
fit(x_train,
y_train,
epochs = 20,
batch_size = 128,
validation_split = 0.2)
plot(history)
model %>%
evaluate(x_test,
y_test)
pred = model %>%
predict_classes(x_test)
table(Predicted = pred,
Actual = y_test_actual)
prob = model %>%
predict_proba(x_test)
ans = cbind(prob,pred,y_test_actual)
setwd("F:/Masters/Semester 3/rekognition")
library(dplyr)
library(plyr)
library(tidyverse)
df = read.csv("./labels.csv",header = FALSE)
df1 = read.csv("./MOCK_DATA.csv")
df2 = read.csv("./images.csv",header = FALSE)
names(df) <- c('id','Name','Label','Confidence')
names(df1) <- c('id','City','Country','Latitude','Longitude')
names(df2) <- c('id','Name','UserID')
df2 = df2 %>%
left_join(df1, by=c("id"))
df = df %>%
left_join(df2, by=c("Name"))
df = df[,c(-1,-5)]
nature = c("Travel", "Outdoors", "Nature", "Wilderness", "Rock", "Bush", "Weather",
"Cloud", "Sky", "Landscape", "Scenery", "Tree", "Flower", "Rose", "Blossom",
"Ruins", "Bird", "Soil", "Animal", "Sunset", "Dusk", "Red Sky", "Sunrise",
"Grassland", "Field", "Yard", "Land", "Countryside", "Plant", "Wildlife", "Lawn")
adventure = c( "Crowd", "Car", "Sedan", "Vehicle", "Transportation",
"Airplane", "Bus", "Automobile", "Road", "Highway","Freeway",
"Sport", "Sports", "Scenery", "Bike", "Airport", "Aircraft", "Airfield", "Tire",
"Bicycle", "Helmet", "Cyclist", "Jet", "Airliner", "Flight", "Warplane", "Pyramid",
"Wheel", "Sports Car", "Car Wheel", "Camping", "Mountain Tent", "Truck", "Traffic Light",
"Train", "Railway")
beach = c("Sea", "Nature", "Ocean", "Water", "Wilderness", "Rock", "Bush", "Weather",
"Cloud", "Sky", "Landscape", "Sea Waves", "Boat", "Flood", "Lake", "Coast", "Dock")
architecture = c("Building", "Architecture", "Amusement Park", "Theme Park", "Construction",
"Church","Temple", "Sculpture", "Art", "Archaeology",
"Statue", "Housing", "House", "Mansion", "Villa", "City", "Urban", "Rural",
"Metropolis", "Office Building", "Spire", "Apartment Building", "Canal", "Chair",
"Furniture", "Flooring", "Rocking Chair", "Floor", "Stained Glass", "Altar", "Apse",
"Lamp", "Light", "Candle", "Book", "Tent", "Interior Design", "Indoors", "Shop",
"Stage", "Handrail", "Window Display", "Window", "Table", "Desk", "Roof", "Tower",
"Dome", "Path", "Walkway", "Sidewalk", "Home Decor", "Monastery", "Red Carpet",
"Bench", "Downtown", "Wall", "Brick", "Fench", "Town", "Path", "Roof", "Sidewalk",
"Fireplace", "Clock Tower", "Logo", "Symbol", "Trademark", "Dome", "Mosque",
"Train Station", "Terminal", "Train Track", "Rail", "Suburb", "Town", "Tarmac",
"Construction Crane")
clothing = c("Apparel", "Footwear", "Shoe", "Clothing", "Tie","Accessory", "Accessories", "Suit",
"Overcoat", "Coat", "Sunglasses", "Hat", "Fashion", "Pants")
food = c("Food", "Pasta", "Noodle", "Dish", "Meal", "Vermicelli", "Egg", "Burger",
"Bread", "Bun", "Sweets", "Grass", "Vegetation", "Fruit", "Cherry", "Poultry", "Chicken",
"Seasoning", "Sandwich", "Orange", "Citrus Fruit", "French Toast", "Toast", "Breakfast",
"Vegetable", "Stew", "Bowl", "Pizza", "Bean", "Steak", "Ribs", "Cutlery", "Spoon", "Lunch",
"Cornbread", "Pancake", "Pita", "Glass", "Wine", "Beverage", "Alcohol", "Wine Glass", "Red Wine",
"Bottle", "Sprout", "Fries", "Lentil", "Fork", "Garlic", "Burrito", "Dessert", "Cake",
"Birthday Cake", "Dining Table", "Food Court", "Vessel", "Apple", "Produce")
df$Category = ifelse(is.element(df$Label, nature),"Nature",
ifelse(is.element(df$Label, adventure),"Adventure",
ifelse(is.element(df$Label, beach),"Beach",
ifelse(is.element(df$Label, food),"Food",
ifelse(is.element(df$Label, architecture),"Architecture",
ifelse(is.element(df$Label, clothing),"Clothing","none"))))))
df$Name = as.factor(df$Name)
write.csv(df, "./dataset.csv",row.names = FALSE)
setwd("F:/Masters/Semester 3/thesis/rekognition")
library(dplyr)
library(plyr)
library(tidyverse)
df = read.csv("./labels.csv",header = FALSE)
df1 = read.csv("./MOCK_DATA.csv")
df2 = read.csv("./images.csv",header = FALSE)
names(df) <- c('id','Name','Label','Confidence')
names(df1) <- c('id','City','Country','Latitude','Longitude')
names(df2) <- c('id','Name','UserID')
df2$id <- as.integer(df2$id)
df2 = df2 %>%
left_join(df1, by=c("id"))
df = df %>%
left_join(df2, by=c("Name"))
df = df[,c(-1,-5)]
nature = c("Travel", "Outdoors", "Nature", "Wilderness", "Rock", "Bush", "Weather",
"Cloud", "Sky", "Landscape", "Scenery", "Tree", "Flower", "Rose", "Blossom",
"Ruins", "Bird", "Soil", "Animal", "Sunset", "Dusk", "Red Sky", "Sunrise",
"Grassland", "Field", "Yard", "Land", "Countryside", "Plant", "Wildlife", "Lawn", "Turtle",
"Animal", "Reptile", "Tortoise", "Wood", "Dog", "Snow", "Hill", "Farm", "Plateau",
"Tree Trunk", "Skylight", "Sunlight", "Ground", "Rainforest", "Waterfall", "Stream",
"Lighting", "Mountain", "Frost", "Ice", "Park", "Toad", "Lizard", "Amphibian",
"Adventure", "Squirrel", "Mammal", "Pet", "Sheep", "Dinosaur", "Skeleton", "Canine",
"Insect", "Spider", "Bear", "Sparrow", "Duck", "Frog", "Butterfly", "Bee", "Leaf", "Fog",
"Sea Turtle", "Horse", "Mountain", "Smoke", "Snail", "Slope", "Cave", "Cat", "Ant", "Ox",
"Cow", "Sea", "Nature", "Ocean", "Water", "Wilderness", "Rock", "Bush", "Weather",
"Cloud", "Sky", "Landscape", "Sea Waves", "Boat", "Flood", "Lake", "Coast", "Dock",
"River", "Sea Life", "Waterfront", "Watercraft", "Beach")
transport = c( "Crowd", "Car", "Sedan", "Vehicle", "Transportation",
"Airplane", "Bus", "Automobile", "Road", "Highway","Freeway",
"Sport", "Sports", "Scenery", "Bike", "Airport", "Aircraft", "Airfield", "Tire",
"Bicycle", "Helmet", "Cyclist", "Jet", "Airliner", "Flight", "Warplane", "Pyramid",
"Wheel", "Sports Car", "Car Wheel", "Camping", "Mountain Tent", "Truck", "Traffic Light",
"Train", "Railway", "Buggy", "Sports Car", "Kart", "Skateboard", "Motorcycle",
"Graffiti", "Race Car", "Apparel", "Footwear", "Shoe", "Clothing", "Tie","Accessory", "Accessories", "Suit",
"Overcoat", "Coat", "Sunglasses", "Hat", "Fashion", "Pants", "Shorts", "Skirt",
"Long Sleeve", "Blazer", "Jacket", "Goggles", "Wristwatch", "Jewelry", "Jeans", "Sleeve",
"T-Shirt", "Cap", "Baseball Cap", "Bikini")
architecture = c("Building", "Architecture", "Amusement Park", "Theme Park", "Construction",
"Church","Temple", "Sculpture", "Art", "Archaeology",
"Statue", "Housing", "House", "Mansion", "Villa", "City", "Urban", "Rural",
"Metropolis", "Office Building", "Spire", "Apartment Building", "Canal", "Chair",
"Furniture", "Flooring", "Rocking Chair", "Floor", "Stained Glass", "Altar", "Apse",
"Lamp", "Light", "Candle", "Book", "Tent", "Interior Design", "Indoors", "Shop",
"Stage", "Handrail", "Window Display", "Window", "Table", "Desk", "Roof", "Tower",
"Dome", "Path", "Walkway", "Sidewalk", "Home Decor", "Monastery", "Red Carpet",
"Bench", "Downtown", "Wall", "Brick", "Fench", "Town", "Path", "Roof", "Sidewalk",
"Fireplace", "Clock Tower", "Logo", "Symbol", "Trademark", "Dome", "Mosque",
"Train Station", "Terminal", "Train Track", "Rail", "Suburb", "Town", "Tarmac",
"Construction Crane", "Dam", "Fountain", "Shelter", "Room", "Pillar", "Spire",
"Bell Tower", "Lighthouse", "Steeple", "Garden", "Lobby", "Shrine", "Auditorium",
"Bathroom", "Bathtub")
food = c("Food", "Pasta", "Noodle", "Dish", "Meal", "Vermicelli", "Egg", "Burger",
"Bread", "Bun", "Sweets", "Grass", "Vegetation", "Fruit", "Cherry", "Poultry", "Chicken",
"Seasoning", "Sandwich", "Orange", "Citrus Fruit", "French Toast", "Toast", "Breakfast",
"Vegetable", "Stew", "Bowl", "Pizza", "Bean", "Steak", "Ribs", "Cutlery", "Spoon", "Lunch",
"Cornbread", "Pancake", "Pita", "Glass", "Wine", "Beverage", "Alcohol", "Wine Glass", "Red Wine",
"Bottle", "Sprout", "Fries", "Lentil", "Fork", "Garlic", "Burrito", "Dessert", "Cake",
"Birthday Cake", "Dining Table", "Food Court", "Vessel", "Apple", "Produce", "Restaurant",
"Cafeteria", "Coffee Cup", "Coffee", "Chocolate", "Milk", "Drink", "Cocktail", "Seafood",
"Fish", "Lobster", "Spaghetti", "Watermelon", "Dinner", "Soda", "Coke", "Beer", "Cola", "Bakery",
"Banana")
df$Category = ifelse(is.element(df$Label, nature),"Nature",
ifelse(is.element(df$Label, adventure),"Adventure",
ifelse(is.element(df$Label, beach),"Beach",
ifelse(is.element(df$Label, food),"Food",
ifelse(is.element(df$Label, architecture),"Architecture",
ifelse(is.element(df$Label, clothing),"Clothing","none"))))))
df$Name = as.factor(df$Name)
write.csv(df, "./dataset.csv",row.names = FALSE)
setwd("F:/Masters/Semester 3/thesis/rekognition")
library(dplyr)
library(plyr)
library(tidyverse)
df = read.csv("./labels.csv",header = FALSE)
df1 = read.csv("./MOCK_DATA.csv")
df2 = read.csv("./images.csv",header = FALSE)
names(df) <- c('id','Name','Label','Confidence')
names(df1) <- c('id','City','Country','Latitude','Longitude')
names(df2) <- c('id','Name','UserID')
df2$id <- as.integer(df2$id)
df2 = df2 %>%
left_join(df1, by=c("id"))
df = df %>%
left_join(df2, by=c("Name"))
df = df[,c(-1,-5)]
nature = c("Travel", "Outdoors", "Nature", "Wilderness", "Rock", "Bush", "Weather",
"Cloud", "Sky", "Landscape", "Scenery", "Tree", "Flower", "Rose", "Blossom",
"Ruins", "Bird", "Soil", "Animal", "Sunset", "Dusk", "Red Sky", "Sunrise",
"Grassland", "Field", "Yard", "Land", "Countryside", "Plant", "Wildlife", "Lawn", "Turtle",
"Animal", "Reptile", "Tortoise", "Wood", "Dog", "Snow", "Hill", "Farm", "Plateau",
"Tree Trunk", "Skylight", "Sunlight", "Ground", "Rainforest", "Waterfall", "Stream",
"Lighting", "Mountain", "Frost", "Ice", "Park", "Toad", "Lizard", "Amphibian",
"Adventure", "Squirrel", "Mammal", "Pet", "Sheep", "Dinosaur", "Skeleton", "Canine",
"Insect", "Spider", "Bear", "Sparrow", "Duck", "Frog", "Butterfly", "Bee", "Leaf", "Fog",
"Sea Turtle", "Horse", "Mountain", "Smoke", "Snail", "Slope", "Cave", "Cat", "Ant", "Ox",
"Cow", "Sea", "Nature", "Ocean", "Water", "Wilderness", "Rock", "Bush", "Weather",
"Cloud", "Sky", "Landscape", "Sea Waves", "Boat", "Flood", "Lake", "Coast", "Dock",
"River", "Sea Life", "Waterfront", "Watercraft", "Beach")
transport = c( "Crowd", "Car", "Sedan", "Vehicle", "Transportation",
"Airplane", "Bus", "Automobile", "Road", "Highway","Freeway",
"Sport", "Sports", "Scenery", "Bike", "Airport", "Aircraft", "Airfield", "Tire",
"Bicycle", "Helmet", "Cyclist", "Jet", "Airliner", "Flight", "Warplane", "Pyramid",
"Wheel", "Sports Car", "Car Wheel", "Camping", "Mountain Tent", "Truck", "Traffic Light",
"Train", "Railway", "Buggy", "Sports Car", "Kart", "Skateboard", "Motorcycle",
"Graffiti", "Race Car", "Apparel", "Footwear", "Shoe", "Clothing", "Tie","Accessory", "Accessories", "Suit",
"Overcoat", "Coat", "Sunglasses", "Hat", "Fashion", "Pants", "Shorts", "Skirt",
"Long Sleeve", "Blazer", "Jacket", "Goggles", "Wristwatch", "Jewelry", "Jeans", "Sleeve",
"T-Shirt", "Cap", "Baseball Cap", "Bikini")
architecture = c("Building", "Architecture", "Amusement Park", "Theme Park", "Construction",
"Church","Temple", "Sculpture", "Art", "Archaeology",
"Statue", "Housing", "House", "Mansion", "Villa", "City", "Urban", "Rural",
"Metropolis", "Office Building", "Spire", "Apartment Building", "Canal", "Chair",
"Furniture", "Flooring", "Rocking Chair", "Floor", "Stained Glass", "Altar", "Apse",
"Lamp", "Light", "Candle", "Book", "Tent", "Interior Design", "Indoors", "Shop",
"Stage", "Handrail", "Window Display", "Window", "Table", "Desk", "Roof", "Tower",
"Dome", "Path", "Walkway", "Sidewalk", "Home Decor", "Monastery", "Red Carpet",
"Bench", "Downtown", "Wall", "Brick", "Fench", "Town", "Path", "Roof", "Sidewalk",
"Fireplace", "Clock Tower", "Logo", "Symbol", "Trademark", "Dome", "Mosque",
"Train Station", "Terminal", "Train Track", "Rail", "Suburb", "Town", "Tarmac",
"Construction Crane", "Dam", "Fountain", "Shelter", "Room", "Pillar", "Spire",
"Bell Tower", "Lighthouse", "Steeple", "Garden", "Lobby", "Shrine", "Auditorium",
"Bathroom", "Bathtub")
food = c("Food", "Pasta", "Noodle", "Dish", "Meal", "Vermicelli", "Egg", "Burger",
"Bread", "Bun", "Sweets", "Grass", "Vegetation", "Fruit", "Cherry", "Poultry", "Chicken",
"Seasoning", "Sandwich", "Orange", "Citrus Fruit", "French Toast", "Toast", "Breakfast",
"Vegetable", "Stew", "Bowl", "Pizza", "Bean", "Steak", "Ribs", "Cutlery", "Spoon", "Lunch",
"Cornbread", "Pancake", "Pita", "Glass", "Wine", "Beverage", "Alcohol", "Wine Glass", "Red Wine",
"Bottle", "Sprout", "Fries", "Lentil", "Fork", "Garlic", "Burrito", "Dessert", "Cake",
"Birthday Cake", "Dining Table", "Food Court", "Vessel", "Apple", "Produce", "Restaurant",
"Cafeteria", "Coffee Cup", "Coffee", "Chocolate", "Milk", "Drink", "Cocktail", "Seafood",
"Fish", "Lobster", "Spaghetti", "Watermelon", "Dinner", "Soda", "Coke", "Beer", "Cola", "Bakery",
"Banana")
df$Category = ifelse(is.element(df$Label, nature),"Nature",
ifelse(is.element(df$Label, transport),"Adventure",
ifelse(is.element(df$Label, food),"Food",
ifelse(is.element(df$Label, architecture),"Architecture", "none"))))
df$Name = as.factor(df$Name)
write.csv(df, "./dataset.csv",row.names = FALSE)
setwd("F:/Masters/Semester 3/thesis/rekognition")
library(dplyr)
library(plyr)
library(tidyverse)
df = read.csv("./category.csv")
df1 = read.csv("./images.csv",header = FALSE)
names(df1) <- c('id','Name','UserID')
#df = df %>%
#  left_join(df1, by=c("Name"))
df = merge(x=df, y=df1, by="Name")
write.csv(df, "./dataset1.csv",row.names = FALSE)
setwd("F:/Masters/Semester 3/thesis/rekognition")
library(dplyr)
library(plyr)
library(tidyverse)
library(reshape2)
df = read.csv("./userProfiles.csv")
df1 = read.csv("./dataset-userCategory.csv")
df2 = read.csv("./dataset1.csv")
names(df1) <- c('id','MainCategory')
df2$id = as.integer(df2$id)
class(df2$id)
df = df %>%
left_join(df1, by=c("id"))
df3 = df2 %>%
group_by(UserID) %>%
top_n(n=10, wt=id)
df3 = df3[,c(-1,-3)]
df4 =  dcast(df3, UserID~Category, fill=0)
colnames(df4)[1] <- "id"
df = df %>%
left_join(df4, by=c("id"))
write.csv(df, "./dataset2.csv",row.names = FALSE)
